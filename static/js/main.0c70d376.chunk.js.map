{"version":3,"sources":["components/Toolbar.js","components/Editor.js","components/Preview.js","App.js","Placeholder.js","serviceWorker.js","index.js"],"names":["Toolbar","props","className","text","onClick","icon","Editor","id","onChange","name","value","marked","require","setOptions","gfm","breaks","renderer","Renderer","link","href","title","Preview","dangerouslySetInnerHTML","__html","markdown","App","state","editorMaximised","previewMaximised","handleChange","bind","handleEditorMaximise","handlePreviewMaximise","event","target","this","setState","classes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uSAUeA,MARf,SAAiBC,GACf,OACE,yBAAKC,UAAU,YAAYD,EAAME,KAC/B,4BAAQC,QAASH,EAAMG,SAAS,uBAAGF,UAAWD,EAAMI,UCG3CC,MANf,SAAgBL,GACd,OACE,8BAAUM,GAAG,SAASL,UAAU,MAAMM,SAAUP,EAAMO,SAAUC,KAAK,WAAWC,MAAOT,EAAMS,SCF3FC,EAASC,EAAQ,GACvBD,EAAOE,WAAW,CAChBC,KAAK,EACLC,QAAQ,IAIV,IAAMC,EAAW,IAAIL,EAAOM,SAC5BD,EAASE,KAAO,SAAUC,EAAMC,EAAOjB,GACrC,MAAO,mCAA4BgB,EAA5B,aAAqChB,GAAS,QASxCkB,MANf,SAAiBpB,GACf,OACE,yBAAKC,UAAU,MAAMK,GAAG,UAAUe,wBAAyB,CAACC,OAAQZ,EAAOV,EAAMuB,SAAU,CAAER,SAAUA,QCTrGL,EAASC,EAAQ,GACvBD,EAAOE,WAAW,CAChBC,KAAK,EACLC,QAAQ,KAIO,IAAIJ,EAAOM,UACnBC,KAAO,SAAUC,EAAMC,EAAOjB,GACrC,MAAO,mCAA4BgB,EAA5B,aAAqChB,GAAS,Q,IAoDxCsB,E,YAhDb,aAAc,IAAD,8BACX,+CACKC,MAAQ,CACXF,SCvBW,w8BDwBXG,iBAAiB,EACjBC,kBAAkB,GAEpB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,qBAAuB,EAAKA,qBAAqBD,KAA1B,gBAC5B,EAAKE,sBAAwB,EAAKA,sBAAsBF,KAA3B,gBATlB,E,0EAYFG,GAAO,IAAD,EACKA,EAAMC,OAArBzB,EADU,EACVA,KAAMC,EADI,EACJA,MACbyB,KAAKC,SAAL,eACG3B,EAAOC,M,6CAKVyB,KAAKC,SAAS,CACZT,iBAAkBQ,KAAKT,MAAMC,oB,8CAK/BQ,KAAKC,SAAS,CACZR,kBAAmBO,KAAKT,MAAME,qB,+BAK9B,IAAMS,EAAUF,KAAKT,MAAMC,gBAAkB,CAAC,YAAa,OAAQ,2CAA6CQ,KAAKT,MAAME,iBAAmB,CAAC,OAAQ,YAAa,2CAA6C,CAAC,aAAc,aAAc,yCAC9O,OACE,yBAAKrB,GAAG,aACN,yBAAKA,GAAG,mBAAmBL,UAAWmC,EAAQ,IAC5C,kBAAC,EAAD,CAASlC,KAAK,SAASC,QAAS+B,KAAKJ,qBAAsB1B,KAAMgC,EAAQ,KACzE,kBAAC,EAAD,CAAQ7B,SAAU2B,KAAKN,aAAcnB,MAAOyB,KAAKT,MAAMF,YAEzD,yBAAKjB,GAAG,oBAAoBL,UAAWmC,EAAQ,IAC7C,kBAAC,EAAD,CAASlC,KAAK,UAAUC,QAAS+B,KAAKH,sBAAuB3B,KAAMgC,EAAQ,KAC3E,kBAAC,EAAD,CAASb,SAAUW,KAAKT,MAAMF,iB,GA1CtBc,IAAMC,WEPJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0c70d376.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Toolbar(props){\r\n  return(\r\n    <div className=\"box-head\">{props.text}\r\n      <button onClick={props.onClick}><i className={props.icon}></i></button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Toolbar\r\n","import React from 'react'\r\n\r\nfunction Editor(props){\r\n  return(\r\n    <textarea id=\"editor\" className=\"box\" onChange={props.onChange} name=\"markdown\" value={props.value}></textarea>\r\n  )\r\n}\r\n\r\nexport default Editor\r\n","import React from 'react'\r\n\r\nconst marked = require('marked');\r\nmarked.setOptions({\r\n  gfm: true,\r\n  breaks: true\r\n})\r\n\r\n// INSERTS target=\"_blank\" INTO HREF TAGS (required for codepen links)\r\nconst renderer = new marked.Renderer();\r\nrenderer.link = function (href, title, text) {\r\n  return `<a target=\"_blank\" href=\"${href}\">${text}` + '</a>';\r\n}\r\n\r\nfunction Preview(props){\r\n  return(\r\n    <div className=\"box\" id=\"preview\" dangerouslySetInnerHTML={{__html: marked(props.markdown, { renderer: renderer })}} />\r\n  )\r\n}\r\n\r\nexport default Preview\r\n","import React from 'react'\nimport './App.css';\nimport Toolbar from './components/Toolbar'\nimport Editor from './components/Editor'\nimport Preview from './components/Preview'\nimport placeholder from './Placeholder'\n\nconst marked = require('marked');\nmarked.setOptions({\n  gfm: true,\n  breaks: true\n})\n\n// INSERTS target=\"_blank\" INTO HREF TAGS (required for codepen links)\nconst renderer = new marked.Renderer();\nrenderer.link = function (href, title, text) {\n  return `<a target=\"_blank\" href=\"${href}\">${text}` + '</a>';\n}\n\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      markdown: placeholder,\n      editorMaximised: false,\n      previewMaximised: false\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleEditorMaximise = this.handleEditorMaximise.bind(this);\n    this.handlePreviewMaximise = this.handlePreviewMaximise.bind(this);\n  }\n\nhandleChange(event){\n  const {name, value} = event.target;\n  this.setState({\n    [name]: value\n  })\n}\n\nhandleEditorMaximise(){\n  this.setState({\n    editorMaximised: !this.state.editorMaximised\n  })\n}\n\nhandlePreviewMaximise(){\n  this.setState({\n    previewMaximised: !this.state.previewMaximised\n  })\n}\n\n  render() {\n    const classes = this.state.editorMaximised ? ['maximised', 'hide', 'fas fa-compress-arrows-alt expandButton'] : this.state.previewMaximised ? ['hide', 'maximised', 'fas fa-compress-arrows-alt expandButton'] : ['containers', 'containers', 'fas fa-expand-arrows-alt expandButton'];\n    return (\n      <div id=\"container\">\n        <div id=\"editor-container\" className={classes[0]}>\n          <Toolbar text=\"Editor\" onClick={this.handleEditorMaximise} icon={classes[2]}/>\n          <Editor onChange={this.handleChange} value={this.state.markdown}/>\n        </div>\n        <div id=\"preview-container\" className={classes[1]}>\n          <Toolbar text=\"Preview\" onClick={this.handlePreviewMaximise} icon={classes[2]}/>\n          <Preview markdown={this.state.markdown}/>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const placeholder = `# Welcome to your Markdown Previewer\r\n## A great place to practise\r\n### You can learn more about GitHub Flavored Markdown [here](https://github.github.com/gfm/)\r\n\r\nIf you need to write some code, we've got you covered:\r\n\\`<h1>Hello World!</h1><br>\\`\r\n\r\nWhat's that? You want to create some block code? Sorted:\r\n\r\n\\`\\`\\`\r\nfunction(answer){\r\n   if (answer === 42){\r\n      return \"DON\\'T PANIC\"\r\n   }\r\n}\r\n\\`\\`\\`\r\n\r\nYou know all those things? Put them in a list:\r\n- things\r\n- stuff\r\n- other stuff\r\n\r\nRank your favourite words\r\n1. absquatulate\r\n1. antidisestablishmentarianism\r\n1. discombobulate\r\n\r\nUse a block quote to emphasise the meaningful things you have to say:\r\n> Curiosity killed the cat,\r\n> so don't be curious\r\n> or your cat will die\r\n\r\nYou can also get the dummy's attention with **BOLD TEXT**.\r\n\r\n##### Of course, as always, people just super like cats:\r\n![A Cat](https://placekitten.com/200/300)\r\n\r\nCreated by [Sophie Chapman](https://twitter.com/sophiecantype)\r\n`;\r\n\r\nexport default placeholder\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}